digraph {
0 [shape=plain label=<<table border="1"><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(0), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: NodeProperty { node: Symbol(Skeleton(0), 0), property: () } }</td></tr></table>>]
0:out0 -> 1:in0 [style=""]
1 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="2" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="2">State { matches: [], scope: {Symbol(Skeleton(0), 0)}, deterministic: false }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: NextRoot { line_nb: 1, new_root: Discover(0) } }</td><td port="out1" align="text" colspan="1" cellpadding="1" >1: Transition { predicate: NextRoot { line_nb: 1, new_root: Exists(Symbol(Skeleton(0), 0)) } }</td></tr></table>>]
1:out0 -> 2:in0 [style=""]
1:out1 -> 3:in0 [style=""]
2 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="2" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="2">State { matches: [], scope: {Symbol(Skeleton(0), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: LinkNewNode { node: Symbol(Skeleton(0), 0), property: (Outgoing(3), Incoming(2)), new_node: Symbol(Skeleton(1), 0) } }</td><td port="out1" align="text" colspan="1" cellpadding="1" >1: Transition { predicate: LinkNewNode { node: Symbol(Skeleton(0), 0), property: (Outgoing(0), Incoming(2)), new_node: Symbol(Skeleton(1), 0) } }</td></tr></table>>]
2:out0 -> 4:in0 [style=""]
2:out1 -> 5:in0 [style=""]
3 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="3" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="3">State { matches: [], scope: {Symbol(Skeleton(0), 0)}, deterministic: false }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: NextRoot { line_nb: 2, new_root: Discover(0) } }</td><td port="out1" align="text" colspan="1" cellpadding="1" >1: Transition { predicate: True }</td><td port="out2" align="text" colspan="1" cellpadding="1" >2: Transition { predicate: NextRoot { line_nb: 2, new_root: Exists(Symbol(Skeleton(0), 0)) } }</td></tr></table>>]
3:out0 -> 6:in0 [style=""]
3:out1 -> 7:in0 [style=""]
3:out2 -> 8:in0 [style=""]
4 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(1), 0), Symbol(Skeleton(0), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: NodeProperty { node: Symbol(Skeleton(1), 0), property: () } }</td></tr></table>>]
4:out0 -> 9:in0 [style=""]
5 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(1), 0), Symbol(Skeleton(0), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: NodeProperty { node: Symbol(Skeleton(1), 0), property: () } }</td></tr></table>>]
5:out0 -> 10:in0 [style=""]
6 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(0), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: LinkNewNode { node: Symbol(Skeleton(0), 0), property: (Incoming(0), Outgoing(1)), new_node: Symbol(Skeleton(2), 0) } }</td></tr></table>>]
6:out0 -> 11:in0 [style=""]
7 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="3" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="3">State { matches: [], scope: {Symbol(Skeleton(0), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: LinkNewNode { node: Symbol(Skeleton(0), 0), property: (Incoming(0), Outgoing(2)), new_node: Symbol(LeftOver(0), 0) } }</td><td port="out1" align="text" colspan="1" cellpadding="1" >1: Transition { predicate: LinkNewNode { node: Symbol(Skeleton(0), 0), property: (Incoming(1), Outgoing(0)), new_node: Symbol(LeftOver(0), 0) } }</td><td port="out2" align="text" colspan="1" cellpadding="1" >2: Transition { predicate: LinkKnownNode { node: Symbol(Skeleton(0), 0), property: (Incoming(0), Outgoing(2)), known_node: Symbol(Skeleton(0), 0) } }</td></tr></table>>]
7:out0 -> 12:in0 [style=""]
7:out1 -> 13:in0 [style=""]
7:out2 -> 14:in0 [style=""]
8 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="2" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="2">State { matches: [], scope: {Symbol(Skeleton(0), 0)}, deterministic: false }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: NextRoot { line_nb: 3, new_root: Exists(Symbol(Skeleton(0), 0)) } }</td><td port="out1" align="text" colspan="1" cellpadding="1" >1: Transition { predicate: NextRoot { line_nb: 3, new_root: Discover(0) } }</td></tr></table>>]
8:out0 -> 15:in0 [style=""]
8:out1 -> 16:in0 [style=""]
9 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(1), 0), Symbol(Skeleton(0), 0)}, deterministic: false }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: NextRoot { line_nb: 2, new_root: Exists(Symbol(Skeleton(1), 0)) } }</td></tr></table>>]
9:out0 -> 17:in0 [style=""]
10 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(1), 0), Symbol(Skeleton(0), 0)}, deterministic: false }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: True }</td></tr></table>>]
10:out0 -> 18:in0 [style=""]
11 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(0), 0), Symbol(Skeleton(2), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: NodeProperty { node: Symbol(Skeleton(2), 0), property: () } }</td></tr></table>>]
11:out0 -> 19:in0 [style=""]
12 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(LeftOver(0), 0), Symbol(Skeleton(0), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: NodeProperty { node: Symbol(LeftOver(0), 0), property: () } }</td></tr></table>>]
12:out0 -> 20:in0 [style=""]
13 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(LeftOver(0), 0), Symbol(Skeleton(0), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: NodeProperty { node: Symbol(LeftOver(0), 0), property: () } }</td></tr></table>>]
13:out0 -> 21:in0 [style=""]
14 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(0), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: LinkKnownNode { node: Symbol(Skeleton(0), 0), property: (Incoming(2), Outgoing(3)), known_node: Symbol(Skeleton(0), 0) } }</td></tr></table>>]
14:out0 -> 22:in0 [style=""]
15 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(0), 0)}, deterministic: false }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: True }</td></tr></table>>]
15:out0 -> 23:in0 [style=""]
16 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(0), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: LinkNewNode { node: Symbol(Skeleton(0), 0), property: (Incoming(0), Outgoing(2)), new_node: Symbol(Skeleton(3), 0) } }</td></tr></table>>]
16:out0 -> 24:in0 [style=""]
17 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(1), 0), Symbol(Skeleton(0), 0)}, deterministic: false }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: NextRoot { line_nb: 3, new_root: Discover(2) } }</td></tr></table>>]
17:out0 -> 25:in0 [style=""]
18 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(1), 0), Symbol(Skeleton(0), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: LinkKnownNode { node: Symbol(Skeleton(1), 0), property: (Incoming(1), Outgoing(0)), known_node: Symbol(Skeleton(1), 0) } }</td></tr></table>>]
18:out0 -> 26:in0 [style=""]
19 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(0), 0), Symbol(Skeleton(2), 0)}, deterministic: false }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: NextRoot { line_nb: 3, new_root: Exists(Symbol(Skeleton(2), 0)) } }</td></tr></table>>]
19:out0 -> 27:in0 [style=""]
20 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(LeftOver(0), 0), Symbol(Skeleton(0), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: LinkKnownNode { node: Symbol(LeftOver(0), 0), property: (Incoming(2), Outgoing(1)), known_node: Symbol(Skeleton(0), 0) } }</td></tr></table>>]
20:out0 -> 28:in0 [style=""]
21 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(LeftOver(0), 0), Symbol(Skeleton(0), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: LinkKnownNode { node: Symbol(LeftOver(0), 0), property: (Incoming(0), Outgoing(1)), known_node: Symbol(Skeleton(0), 0) } }</td></tr></table>>]
21:out0 -> 29:in0 [style=""]
22 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(0), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: LinkKnownNode { node: Symbol(Skeleton(0), 0), property: (Incoming(1), Outgoing(0)), known_node: Symbol(Skeleton(0), 0) } }</td></tr></table>>]
22:out0 -> 30:in0 [style=""]
23 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(0), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: LinkNewNode { node: Symbol(Skeleton(0), 0), property: (Incoming(0), Outgoing(0)), new_node: Symbol(LeftOver(0), 0) } }</td></tr></table>>]
23:out0 -> 31:in0 [style=""]
24 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(0), 0), Symbol(Skeleton(3), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: NodeProperty { node: Symbol(Skeleton(3), 0), property: () } }</td></tr></table>>]
24:out0 -> 32:in0 [style=""]
25 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(1), 0), Symbol(Skeleton(0), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: LinkNewNode { node: Symbol(Skeleton(1), 0), property: (Outgoing(0), Incoming(1)), new_node: Symbol(Skeleton(3), 0) } }</td></tr></table>>]
25:out0 -> 33:in0 [style=""]
26 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [1], scope: {Symbol(Skeleton(1), 0), Symbol(Skeleton(0), 0)}, deterministic: true }[[1]]</td></tr></table>>]
27 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(0), 0), Symbol(Skeleton(2), 0)}, deterministic: false }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: NextRoot { line_nb: 4, new_root: Discover(1) } }</td></tr></table>>]
27:out0 -> 34:in0 [style=""]
28 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(LeftOver(0), 0), Symbol(Skeleton(0), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: LinkKnownNode { node: Symbol(Skeleton(0), 0), property: (Incoming(1), Outgoing(3)), known_node: Symbol(LeftOver(0), 0) } }</td></tr></table>>]
28:out0 -> 35:in0 [style=""]
29 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(LeftOver(0), 0), Symbol(Skeleton(0), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: LinkKnownNode { node: Symbol(Skeleton(0), 0), property: (Incoming(2), Outgoing(0)), known_node: Symbol(Skeleton(0), 0) } }</td></tr></table>>]
29:out0 -> 36:in0 [style=""]
30 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [7], scope: {Symbol(Skeleton(0), 0)}, deterministic: true }[[7]]</td></tr></table>>]
31 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(LeftOver(0), 0), Symbol(Skeleton(0), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: NodeProperty { node: Symbol(LeftOver(0), 0), property: () } }</td></tr></table>>]
31:out0 -> 37:in0 [style=""]
32 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(0), 0), Symbol(Skeleton(3), 0)}, deterministic: false }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: NextRoot { line_nb: 4, new_root: Exists(Symbol(Skeleton(3), 0)) } }</td></tr></table>>]
32:out0 -> 38:in0 [style=""]
33 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(1), 0), Symbol(Skeleton(0), 0), Symbol(Skeleton(3), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: NodeProperty { node: Symbol(Skeleton(3), 0), property: () } }</td></tr></table>>]
33:out0 -> 39:in0 [style=""]
34 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(0), 0), Symbol(Skeleton(2), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: LinkNewNode { node: Symbol(Skeleton(0), 0), property: (Outgoing(0), Incoming(2)), new_node: Symbol(Skeleton(4), 0) } }</td></tr></table>>]
34:out0 -> 40:in0 [style=""]
35 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(LeftOver(0), 0), Symbol(Skeleton(0), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: LinkKnownNode { node: Symbol(LeftOver(0), 0), property: (Incoming(3), Outgoing(0)), known_node: Symbol(Skeleton(0), 0) } }</td></tr></table>>]
35:out0 -> 41:in0 [style=""]
36 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [0], scope: {Symbol(LeftOver(0), 0), Symbol(Skeleton(0), 0)}, deterministic: true }[[0]]</td></tr></table>>]
37 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(LeftOver(0), 0), Symbol(Skeleton(0), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: LinkNewNode { node: Symbol(Skeleton(0), 0), property: (Incoming(1), Outgoing(2)), new_node: Symbol(LeftOver(1), 0) } }</td></tr></table>>]
37:out0 -> 42:in0 [style=""]
38 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(0), 0), Symbol(Skeleton(3), 0)}, deterministic: false }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: NextRoot { line_nb: 5, new_root: Discover(1) } }</td></tr></table>>]
38:out0 -> 43:in0 [style=""]
39 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(1), 0), Symbol(Skeleton(0), 0), Symbol(Skeleton(3), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: LinkNewNode { node: Symbol(Skeleton(3), 0), property: (Outgoing(1), Incoming(0)), new_node: Symbol(Skeleton(3), 1) } }</td></tr></table>>]
39:out0 -> 44:in0 [style=""]
40 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(4), 0), Symbol(Skeleton(0), 0), Symbol(Skeleton(2), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: NodeProperty { node: Symbol(Skeleton(4), 0), property: () } }</td></tr></table>>]
40:out0 -> 45:in0 [style=""]
41 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(LeftOver(0), 0), Symbol(Skeleton(0), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: LinkKnownNode { node: Symbol(Skeleton(0), 0), property: (Incoming(2), Outgoing(0)), known_node: Symbol(LeftOver(0), 0) } }</td></tr></table>>]
41:out0 -> 46:in0 [style=""]
42 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(LeftOver(0), 0), Symbol(Skeleton(0), 0), Symbol(LeftOver(1), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: NodeProperty { node: Symbol(LeftOver(1), 0), property: () } }</td></tr></table>>]
42:out0 -> 47:in0 [style=""]
43 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(0), 0), Symbol(Skeleton(3), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: LinkNewNode { node: Symbol(Skeleton(0), 0), property: (Outgoing(0), Incoming(2)), new_node: Symbol(Skeleton(5), 0) } }</td></tr></table>>]
43:out0 -> 48:in0 [style=""]
44 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(1), 0), Symbol(Skeleton(0), 0), Symbol(Skeleton(3), 0), Symbol(Skeleton(3), 1)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: NodeProperty { node: Symbol(Skeleton(3), 1), property: () } }</td></tr></table>>]
44:out0 -> 49:in0 [style=""]
45 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(4), 0), Symbol(Skeleton(0), 0), Symbol(Skeleton(2), 0)}, deterministic: false }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: NextRoot { line_nb: 5, new_root: Discover(2) } }</td></tr></table>>]
45:out0 -> 50:in0 [style=""]
46 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(LeftOver(0), 0), Symbol(Skeleton(0), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: LinkKnownNode { node: Symbol(LeftOver(0), 0), property: (Incoming(0), Outgoing(1)), known_node: Symbol(LeftOver(0), 0) } }</td></tr></table>>]
46:out0 -> 51:in0 [style=""]
47 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(LeftOver(0), 0), Symbol(Skeleton(0), 0), Symbol(LeftOver(1), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: LinkKnownNode { node: Symbol(Skeleton(0), 0), property: (Outgoing(0), Incoming(1)), known_node: Symbol(LeftOver(1), 0) } }</td></tr></table>>]
47:out0 -> 52:in0 [style=""]
48 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(5), 0), Symbol(Skeleton(0), 0), Symbol(Skeleton(3), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: NodeProperty { node: Symbol(Skeleton(5), 0), property: () } }</td></tr></table>>]
48:out0 -> 53:in0 [style=""]
49 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(1), 0), Symbol(Skeleton(0), 0), Symbol(Skeleton(3), 0), Symbol(Skeleton(3), 1)}, deterministic: false }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: True }</td></tr></table>>]
49:out0 -> 54:in0 [style=""]
50 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(4), 0), Symbol(Skeleton(0), 0), Symbol(Skeleton(2), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: LinkNewNode { node: Symbol(Skeleton(2), 0), property: (Incoming(0), Outgoing(1)), new_node: Symbol(Skeleton(5), 0) } }</td></tr></table>>]
50:out0 -> 55:in0 [style=""]
51 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(LeftOver(0), 0), Symbol(Skeleton(0), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: LinkKnownNode { node: Symbol(LeftOver(0), 0), property: (Incoming(1), Outgoing(3)), known_node: Symbol(Skeleton(0), 0) } }</td></tr></table>>]
51:out0 -> 56:in0 [style=""]
52 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(LeftOver(0), 0), Symbol(Skeleton(0), 0), Symbol(LeftOver(1), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: LinkNewNode { node: Symbol(LeftOver(1), 0), property: (Outgoing(1), Incoming(1)), new_node: Symbol(LeftOver(2), 0) } }</td></tr></table>>]
52:out0 -> 57:in0 [style=""]
53 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(5), 0), Symbol(Skeleton(0), 0), Symbol(Skeleton(3), 0)}, deterministic: false }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: True }</td></tr></table>>]
53:out0 -> 58:in0 [style=""]
54 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(1), 0), Symbol(Skeleton(0), 0), Symbol(Skeleton(3), 0), Symbol(Skeleton(3), 1)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: LinkKnownNode { node: Symbol(Skeleton(1), 0), property: (Incoming(1), Outgoing(1)), known_node: Symbol(Skeleton(1), 0) } }</td></tr></table>>]
54:out0 -> 59:in0 [style=""]
55 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(0), 0), Symbol(Skeleton(2), 0), Symbol(Skeleton(5), 0), Symbol(Skeleton(4), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: NodeProperty { node: Symbol(Skeleton(5), 0), property: () } }</td></tr></table>>]
55:out0 -> 60:in0 [style=""]
56 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [5], scope: {Symbol(LeftOver(0), 0), Symbol(Skeleton(0), 0)}, deterministic: true }[[5]]</td></tr></table>>]
57 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(LeftOver(0), 0), Symbol(Skeleton(0), 0), Symbol(LeftOver(2), 0), Symbol(LeftOver(1), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: NodeProperty { node: Symbol(LeftOver(2), 0), property: () } }</td></tr></table>>]
57:out0 -> 61:in0 [style=""]
58 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(5), 0), Symbol(Skeleton(0), 0), Symbol(Skeleton(3), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: LinkNewNode { node: Symbol(Skeleton(5), 0), property: (Outgoing(2), Incoming(1)), new_node: Symbol(LeftOver(1), 0) } }</td></tr></table>>]
58:out0 -> 62:in0 [style=""]
59 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(1), 0), Symbol(Skeleton(0), 0), Symbol(Skeleton(3), 0), Symbol(Skeleton(3), 1)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: LinkKnownNode { node: Symbol(Skeleton(3), 1), property: (Outgoing(0), Incoming(0)), known_node: Symbol(Skeleton(3), 0) } }</td></tr></table>>]
59:out0 -> 63:in0 [style=""]
60 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(0), 0), Symbol(Skeleton(2), 0), Symbol(Skeleton(5), 0), Symbol(Skeleton(4), 0)}, deterministic: false }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: True }</td></tr></table>>]
60:out0 -> 64:in0 [style=""]
61 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(LeftOver(0), 0), Symbol(Skeleton(0), 0), Symbol(LeftOver(2), 0), Symbol(LeftOver(1), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: LinkKnownNode { node: Symbol(LeftOver(2), 0), property: (Outgoing(1), Incoming(0)), known_node: Symbol(LeftOver(1), 0) } }</td></tr></table>>]
61:out0 -> 65:in0 [style=""]
62 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(5), 0), Symbol(Skeleton(0), 0), Symbol(Skeleton(3), 0), Symbol(LeftOver(1), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: NodeProperty { node: Symbol(LeftOver(1), 0), property: () } }</td></tr></table>>]
62:out0 -> 66:in0 [style=""]
63 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(1), 0), Symbol(Skeleton(0), 0), Symbol(Skeleton(3), 0), Symbol(Skeleton(3), 1)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: LinkNewNode { node: Symbol(Skeleton(3), 1), property: (Incoming(1), Outgoing(0)), new_node: Symbol(LeftOver(3), 0) } }</td></tr></table>>]
63:out0 -> 67:in0 [style=""]
64 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(0), 0), Symbol(Skeleton(2), 0), Symbol(Skeleton(5), 0), Symbol(Skeleton(4), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: LinkKnownNode { node: Symbol(Skeleton(2), 0), property: (Outgoing(0), Incoming(1)), known_node: Symbol(Skeleton(4), 0) } }</td></tr></table>>]
64:out0 -> 68:in0 [style=""]
65 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(LeftOver(0), 0), Symbol(Skeleton(0), 0), Symbol(LeftOver(2), 0), Symbol(LeftOver(1), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: LinkKnownNode { node: Symbol(LeftOver(1), 0), property: (Outgoing(0), Incoming(0)), known_node: Symbol(LeftOver(2), 0) } }</td></tr></table>>]
65:out0 -> 69:in0 [style=""]
66 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(5), 0), Symbol(Skeleton(0), 0), Symbol(Skeleton(3), 0), Symbol(LeftOver(1), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: LinkNewNode { node: Symbol(Skeleton(0), 0), property: (Outgoing(1), Incoming(2)), new_node: Symbol(LeftOver(2), 0) } }</td></tr></table>>]
66:out0 -> 70:in0 [style=""]
67 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(1), 0), Symbol(Skeleton(0), 0), Symbol(Skeleton(3), 0), Symbol(Skeleton(3), 1), Symbol(LeftOver(3), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: NodeProperty { node: Symbol(LeftOver(3), 0), property: () } }</td></tr></table>>]
67:out0 -> 71:in0 [style=""]
68 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(0), 0), Symbol(Skeleton(2), 0), Symbol(Skeleton(5), 0), Symbol(Skeleton(4), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: LinkNewNode { node: Symbol(Skeleton(4), 0), property: (Incoming(0), Outgoing(0)), new_node: Symbol(LeftOver(4), 0) } }</td></tr></table>>]
68:out0 -> 72:in0 [style=""]
69 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(LeftOver(0), 0), Symbol(Skeleton(0), 0), Symbol(LeftOver(2), 0), Symbol(LeftOver(1), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: LinkNewNode { node: Symbol(Skeleton(0), 0), property: (Outgoing(1), Incoming(2)), new_node: Symbol(LeftOver(3), 0) } }</td></tr></table>>]
69:out0 -> 73:in0 [style=""]
70 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(5), 0), Symbol(Skeleton(0), 0), Symbol(Skeleton(3), 0), Symbol(LeftOver(2), 0), Symbol(LeftOver(1), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: NodeProperty { node: Symbol(LeftOver(2), 0), property: () } }</td></tr></table>>]
70:out0 -> 74:in0 [style=""]
71 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(1), 0), Symbol(Skeleton(0), 0), Symbol(Skeleton(3), 0), Symbol(Skeleton(3), 1), Symbol(LeftOver(3), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: LinkKnownNode { node: Symbol(LeftOver(3), 0), property: (Incoming(0), Outgoing(1)), known_node: Symbol(LeftOver(3), 0) } }</td></tr></table>>]
71:out0 -> 75:in0 [style=""]
72 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(0), 0), Symbol(Skeleton(2), 0), Symbol(Skeleton(5), 0), Symbol(LeftOver(4), 0), Symbol(Skeleton(4), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: NodeProperty { node: Symbol(LeftOver(4), 0), property: () } }</td></tr></table>>]
72:out0 -> 76:in0 [style=""]
73 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(LeftOver(0), 0), Symbol(Skeleton(0), 0), Symbol(LeftOver(3), 0), Symbol(LeftOver(2), 0), Symbol(LeftOver(1), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: NodeProperty { node: Symbol(LeftOver(3), 0), property: () } }</td></tr></table>>]
73:out0 -> 77:in0 [style=""]
74 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(5), 0), Symbol(Skeleton(0), 0), Symbol(Skeleton(3), 0), Symbol(LeftOver(2), 0), Symbol(LeftOver(1), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: LinkKnownNode { node: Symbol(Skeleton(3), 0), property: (Outgoing(0), Incoming(0)), known_node: Symbol(LeftOver(1), 0) } }</td></tr></table>>]
74:out0 -> 78:in0 [style=""]
75 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [3], scope: {Symbol(Skeleton(1), 0), Symbol(Skeleton(0), 0), Symbol(Skeleton(3), 0), Symbol(Skeleton(3), 1), Symbol(LeftOver(3), 0)}, deterministic: true }[[3]]</td></tr></table>>]
76 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(0), 0), Symbol(Skeleton(2), 0), Symbol(Skeleton(5), 0), Symbol(LeftOver(4), 0), Symbol(Skeleton(4), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: LinkKnownNode { node: Symbol(LeftOver(4), 0), property: (Incoming(0), Outgoing(3)), known_node: Symbol(Skeleton(5), 0) } }</td></tr></table>>]
76:out0 -> 79:in0 [style=""]
77 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [2], scope: {Symbol(LeftOver(0), 0), Symbol(Skeleton(0), 0), Symbol(LeftOver(3), 0), Symbol(LeftOver(2), 0), Symbol(LeftOver(1), 0)}, deterministic: true }[[2]]</td></tr></table>>]
78 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(5), 0), Symbol(Skeleton(0), 0), Symbol(Skeleton(3), 0), Symbol(LeftOver(2), 0), Symbol(LeftOver(1), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: LinkKnownNode { node: Symbol(LeftOver(1), 0), property: (Outgoing(0), Incoming(1)), known_node: Symbol(Skeleton(5), 0) } }</td></tr></table>>]
78:out0 -> 80:in0 [style=""]
79 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(0), 0), Symbol(Skeleton(2), 0), Symbol(Skeleton(5), 0), Symbol(LeftOver(4), 0), Symbol(Skeleton(4), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: LinkKnownNode { node: Symbol(Skeleton(5), 0), property: (Incoming(0), Outgoing(1)), known_node: Symbol(LeftOver(4), 0) } }</td></tr></table>>]
79:out0 -> 81:in0 [style=""]
80 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(5), 0), Symbol(Skeleton(0), 0), Symbol(Skeleton(3), 0), Symbol(LeftOver(2), 0), Symbol(LeftOver(1), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: LinkKnownNode { node: Symbol(Skeleton(5), 0), property: (Outgoing(1), Incoming(3)), known_node: Symbol(Skeleton(5), 0) } }</td></tr></table>>]
80:out0 -> 82:in0 [style=""]
81 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [4], scope: {Symbol(Skeleton(0), 0), Symbol(Skeleton(2), 0), Symbol(Skeleton(5), 0), Symbol(LeftOver(4), 0), Symbol(Skeleton(4), 0)}, deterministic: true }[[4]]</td></tr></table>>]
82 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(5), 0), Symbol(Skeleton(0), 0), Symbol(Skeleton(3), 0), Symbol(LeftOver(2), 0), Symbol(LeftOver(1), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: LinkKnownNode { node: Symbol(Skeleton(3), 0), property: (Outgoing(1), Incoming(0)), known_node: Symbol(LeftOver(2), 0) } }</td></tr></table>>]
82:out0 -> 83:in0 [style=""]
83 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [], scope: {Symbol(Skeleton(5), 0), Symbol(Skeleton(0), 0), Symbol(Skeleton(3), 0), Symbol(LeftOver(2), 0), Symbol(LeftOver(1), 0)}, deterministic: true }</td></tr><tr><td port="out0" align="text" colspan="1" cellpadding="1" >0: Transition { predicate: LinkKnownNode { node: Symbol(Skeleton(5), 0), property: (Incoming(0), Outgoing(0)), known_node: Symbol(Skeleton(5), 0) } }</td></tr></table>>]
83:out0 -> 84:in0 [style=""]
84 [shape=plain label=<<table border="1"><tr><td port="in0" align="text" colspan="1" cellpadding="1" >0</td></tr><tr><td align="text" border="0" colspan="1">State { matches: [6], scope: {Symbol(Skeleton(5), 0), Symbol(Skeleton(0), 0), Symbol(Skeleton(3), 0), Symbol(LeftOver(2), 0), Symbol(LeftOver(1), 0)}, deterministic: true }[[6]]</td></tr></table>>]
}
